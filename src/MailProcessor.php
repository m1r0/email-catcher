<?php

namespace m1r0\MailGrab;

use DOMDocument;
use TijsVerkoyen\CssToInlineStyles\CssToInlineStyles;

/**
 * The class that parses the email body to make it safe for preview.
 *
 * @package m1r0\MailGrab
 */
class MailProcessor {
	/**
	 * Parse the email body HTML to make it safe for preview.
	 *
	 * @param  string $html The email body HTML.
	 * @return string
	 */
	public function parse( $html ) {
		$html = $this->inline_css( $html );
		$html = $this->extract_body( $html );
		$html = $this->strip_scripts( $html );

		return $html;
	}

	/**
	 * Get the body element from an HTML and convert it to a div.
	 *
	 * @param  string $html The email body HTML.
	 * @return string
	 */
	public function extract_body( $html ) {
		$document     = $this->create_dom_document( $html );
		$body_element = $document->getElementsByTagName( 'body' )->item( 0 );
		$body_html    = $document->saveHTML( $body_element );

		// Replace the body tag with a div to preserve the body style.
		return preg_replace( '~<(/?)body([^>]*)>~i', '<$1div$2>', $body_html );
	}

	/**
	 * Inline all CSS.
	 *
	 * @param  string $html The email body HTML.
	 * @return string
	 */
	public function inline_css( $html ) {
		return ( new CssToInlineStyles() )->convert(
			$html,
			$this->get_external_css( $html )
		);
	}

	/**
	 * Get the CSS from all links.
	 *
	 * @param  string $html The email body HTML.
	 * @return string
	 */
	public function get_external_css( $html ) {
		$document = $this->create_dom_document( $html );

		$urls = array();
		foreach ( $document->getElementsByTagName( 'link' ) as $link ) {
			if ( $link->getAttribute( 'rel' ) === 'stylesheet' ) {
				array_push( $urls, $link->getAttribute( 'href' ) );
			}
		}

		$output = '';
		foreach ( $urls as $url ) {
			// Fix relative protocol. Assume https.
			$url = substr( $url, 0, 2 ) === '//' ? 'https:' . $url : $url;

			$output .= wp_remote_retrieve_body( wp_remote_get( $url ) );
		}

		return $output;
	}

	/**
	 * Remove scripts.
	 *
	 * @param  string $html The email body HTML.
	 * @return string
	 */
	public function strip_scripts( $html ) {
		return preg_replace( '~<(script)[^>]*>.*</\\1>~si', '', $html );
	}

	/**
	 * Make a safe DOM Document instance.
	 *
	 * @param  string $html The email body HTML.
	 * @return \DOMDocument
	 */
	protected function create_dom_document( $html ) {
		$document = new DOMDocument();

		$document->strictErrorChecking = false;

		// Suppress warnings generated by loadHTML.
		$internal_errors = libxml_use_internal_errors( true );

		// phpcs:ignore WordPress.PHP.NoSilencedErrors.Discouraged
		@$document->loadHTML( $html );
		libxml_use_internal_errors( $internal_errors );

		return $document;
	}

}
